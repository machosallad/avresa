name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    outputs:
      firmware_file_path: ${{ steps.generate_md5.outputs.firmware_file_path }}
      md5_file_path: ${{ steps.generate_md5.outputs.md5_file_path }}
      firmware_info_path: ${{ steps.generate_firmware_info.outputs.firmware_info_path }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install platformio

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.0.0
        with:
          versionSpec: "6.x"

      - name: Determine Version
        id: gitversion # step id used as reference for output values
        uses: gittools/actions/gitversion/execute@v3.0.0

      - name: Set CI environment variable
        run: echo "CI=true" >> $GITHUB_ENV

      - name: Generate version.h
        run: |
          echo "#ifndef VERSION_H" > include/version.h
          echo "#define VERSION_H" >> include/version.h
          echo "" >> include/version.h
          echo "class Version {" >> include/version.h
          echo "public:" >> include/version.h
          echo "    static const char* major() { return \"${{ steps.gitversion.outputs.Major }}\"; }" >> include/version.h
          echo "    static const char* minor() { return \"${{ steps.gitversion.outputs.Minor }}\"; }" >> include/version.h
          echo "    static const char* patch() { return \"${{ steps.gitversion.outputs.Patch }}\"; }" >> include/version.h
          echo "    static const char* semver() { return \"${{ steps.gitversion.outputs.FullSemVer }}\"; }" >> include/version.h
          echo "    static const char* tag() { return \"${{ steps.gitversion.outputs.PreReleaseTag }}\"; }" >> include/version.h
          echo "    static const char* date() { return \"${{ steps.gitversion.outputs.CommitDate }}\"; }" >> include/version.h
          echo "    static const bool localBuild() { return false; }" >> include/version.h
          echo "};" >> include/version.h
          echo "" >> include/version.h
          echo "#endif // VERSION_H" >> include/version.h

      - name: Generate constants header for OTA
        run: |
          echo "#ifndef OTA_CONSTANTS_H" > lib/ota_manager/src/ota_constants.h
          echo "#define OTA_CONSTANTS_H" >> lib/ota_manager/src/ota_constants.h
          echo "#include <Arduino.h>" >> lib/ota_manager/src/ota_constants.h
          echo "" >> lib/ota_manager/src/ota_constants.h
          echo "const String OTA_FIRMWARE_INFO_URL = \"${{ secrets.FIRMWARE_INFO_URL }}\";" >> lib/ota_manager/src/ota_constants.h
          echo "const String OTA_FIRMWARE_URL = \"${{ secrets.FIRMWARE_URL }}\";" >> lib/ota_manager/src/ota_constants.h
          echo "" >> lib/ota_manager/src/ota_constants.h
          echo "#endif // OTA_CONSTANTS_H" >> lib/ota_manager/src/ota_constants.h

      - name: Echo Version Number
        run: 'echo "Version: ${{ steps.gitversion.outputs.FullSemVer }}"'

      - name: Build with PlatformIO
        run: platformio run
        env:
          CI: ${{ env.CI }}

      - name: Generate MD5 Checksum
        id: generate_md5
        run: |
          FIRMWARE_PATH=$(find .pio/build -name "firmware.bin" | head -n 1)
          if [ ! -f $FIRMWARE_PATH ]; then
            echo "Firmware binary not found!"
            exit 1
          fi
          md5sum $FIRMWARE_PATH > $FIRMWARE_PATH.md5
          echo "MD5 checksum generated for $FIRMWARE_PATH"
          echo "md5_file_path=$FIRMWARE_PATH.md5" >> $GITHUB_OUTPUT
          echo "firmware_file_path=$FIRMWARE_PATH" >> $GITHUB_OUTPUT

      - name: Generate firmware information JSON
        id: generate_firmware_info
        run: |
          echo "{" > firmware.json
          echo "  \"version\": \"${{ steps.gitversion.outputs.FullSemVer }}\"," >> firmware.json
          echo "  \"date\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"," >> firmware.json
          echo "  \"md5\": \"$(cat ${{ steps.generate_md5.outputs.md5_file_path }} | cut -d ' ' -f 1)\"" >> firmware.json
          echo "}" >> firmware.json
          echo "firmware_info_path=firmware.json" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.gitversion.outputs.SemVer }}
          release_name: Release ${{ steps.gitversion.outputs.SemVer }}
          draft: false
          prerelease: true

      - name: Upload Firmware Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.generate_md5.outputs.firmware_file_path }}
          asset_name: firmware.bin
          asset_content_type: application/octet-stream

      - name: Upload MD5 Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.generate_md5.outputs.md5_file_path }}
          asset_name: firmware.md5
          asset_content_type: text/plain

      - name: Upload Firmware Information
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.generate_firmware_info.outputs.firmware_info_path }}
          asset_name: firmware.json
          asset_content_type: application/json
